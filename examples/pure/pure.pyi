# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import os
import pathlib
import typing
from enum import Enum

MY_CONSTANT: builtins.int
class A:
    NUM1: builtins.int = 2
    r"""
    class attribute NUM1
    """
    NUM2: builtins.int
    r"""
    class attribute NUM2
    """
    @property
    def x(self) -> builtins.int:
        r"""
        default = 2
        """
    @x.setter
    def x(self, value: builtins.int) -> None:
        r"""
        default = 2
        """
    def __new__(cls, x:builtins.int) -> A:
        r"""
        This is a constructor of :class:`A`.
        """
    def show_x(self) -> None: ...
    def ref_test(self, x:dict) -> dict: ...

class B(A):
    ...

class MyDate(datetime.date):
    ...

class Number(Enum):
    FLOAT = ...
    INTEGER = ...

    @property
    def is_float(self) -> builtins.bool:
        r"""
        Whether the number is a float.
        """
    @property
    def is_integer(self) -> builtins.bool:
        r"""
        Whether the number is an integer.
        """

class NumberRenameAll(Enum):
    FLOAT = ...
    r"""
    Float variant
    """
    INTEGER = ...

def ahash_dict() -> builtins.dict[builtins.str, builtins.int]: ...

def create_a(x:builtins.int=2) -> A: ...

def create_dict(n:builtins.int) -> builtins.dict[builtins.int, builtins.list[builtins.int]]: ...

def default_value(num:Number=Number.FLOAT) -> Number: ...

def echo_path(path:builtins.str | os.PathLike | pathlib.Path) -> pathlib.Path: ...

def print_c(c:typing.Optional[builtins.int]=None) -> None: ...

def read_dict(dict:typing.Mapping[builtins.int, typing.Mapping[builtins.int, builtins.int]]) -> None: ...

def str_len(x:builtins.str) -> builtins.int:
    r"""
    Returns the length of the string.
    """

def sum(v:typing.Sequence[builtins.int]) -> builtins.int:
    r"""
    Returns the sum of two numbers as a string.
    """

class MyError(RuntimeError): ...

