use serde::{Deserialize, Serialize};
use std::{convert::Infallible, fmt, str::FromStr};

/// Type checker rule names for MyPy error codes and Pyright diagnostic rules
#[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub enum RuleName {
    // MyPy error codes from https://mypy.readthedocs.io/en/stable/error_code_list.html
    AttrDefined,
    UnionAttr,
    NameDefined,
    UsedBeforeDef,
    CallArg,
    ArgType,
    CallOverload,
    ValidType,
    VarAnnotated,
    Override,
    Return,
    EmptyBody,
    ReturnValue,
    Assignment,
    MethodAssign,
    TypeVar,
    Operator,
    Index,
    ListItem,
    DictItem,
    TypedDictItem,
    TypedDictUnknownKey,
    HasType,
    Import,
    ImportNotFound,
    ImportUntyped,
    NoRedef,
    FuncReturnsValue,
    Abstract,
    TypeAbstract,
    SafeSuper,
    ValidNewtype,
    ExitReturn,
    NameMatch,
    LiteralRequired,
    NoOverloadImpl,
    UnusedCoroutine,
    TopLevelAwait,
    AwaitNotAsync,
    AssertType,
    TruthyFunction,
    StrFormat,
    StrBytesSafe,
    OverloadOverlap,
    OverloadCannotMatch,
    AnnotationUnchecked,
    PropDecorator,
    Syntax,
    TypedDictReadonlyMutated,
    NarrowedTypeNotSubtype,
    Misc,

    // MyPy optional error codes from https://mypy.readthedocs.io/en/stable/error_code_list2.html
    TypeArg,
    NoUntypedDef,
    RedundantCast,
    RedundantSelf,
    ComparisonOverlap,
    NoUntypedCall,
    NoAnyReturn,
    NoAnyUnimported,
    Unreachable,
    Deprecated,
    RedundantExpr,
    PossiblyUndefined,
    TruthyBool,
    TruthyIterable,
    IgnoreWithoutCode,
    UnusedAwaitable,
    UnusedIgnore,
    ExplicitOverride,
    MutableOverride,
    UnimportedReveal,
    ExplicitAny,
    ExhaustiveMatch,

    // Pyright diagnostic rules from https://microsoft.github.io/pyright/#/configuration?id=type-check-rule-overrides
    ReportGeneralTypeIssues,
    ReportPropertyTypeMismatch,
    ReportFunctionMemberAccess,
    ReportMissingImports,
    ReportMissingModuleSource,
    ReportInvalidTypeForm,
    ReportMissingTypeStubs,
    ReportImportCycles,
    ReportUnusedImport,
    ReportUnusedClass,
    ReportUnusedFunction,
    ReportUnusedVariable,
    ReportDuplicateImport,
    ReportWildcardImportFromLibrary,
    ReportAbstractUsage,
    ReportArgumentType,
    ReportAssertTypeFailure,
    ReportAssignmentType,
    ReportAttributeAccessIssue,
    ReportCallIssue,
    ReportInconsistentOverload,
    ReportIndexIssue,
    ReportInvalidTypeArguments,
    ReportInvalidTypeVarUse,
    ReportMissingParameterType,
    ReportMissingTypeArgument,
    ReportOperatorIssue,
    ReportOptionalMemberAccess,
    ReportOptionalSubscript,
    ReportOptionalIterable,
    ReportOptionalCall,
    ReportOptionalOperand,
    ReportOptionalContextManager,
    ReportPrivateImportUsage,
    ReportPrivateUsage,
    ReportRedeclaration,
    ReportReturnType,
    ReportTypedDictNotRequiredAccess,
    ReportUndefinedVariable,
    ReportUnknownArgumentType,
    ReportUnknownLambdaType,
    ReportUnknownMemberType,
    ReportUnknownParameterType,
    ReportUnknownVariableType,
    ReportUnnecessaryCast,
    ReportUnnecessaryComparison,
    ReportUnnecessaryContains,
    ReportUnnecessaryIsInstance,
    ReportUnnecessaryTypeIgnoreComment,
    ReportUnsupportedDunderAll,
    ReportUntypedBaseClass,
    ReportUntypedClassDecorator,
    ReportUntypedFunctionDecorator,
    ReportUntypedNamedTuple,
    ReportIncompatibleMethodOverride,
    ReportIncompatibleVariableOverride,
    ReportInvalidStringEscapeSequence,
    ReportMissingCallArgument,
    ReportUnboundVariable,
    ReportPossiblyUnboundVariable,
    ReportImplicitOverride,
    ReportInvalidStubStatement,
    ReportIncompleteStub,
    ReportUnusedCoroutine,
    ReportAwaitNotAsync,
    ReportMatchNotExhaustive,
    ReportShadowedImports,
    ReportImplicitStringConcatenation,
    ReportDeprecated,
    ReportNoOverloadImplementation,
    ReportTypeCommentUsage,
    ReportConstantRedefinition,
    ReportInconsistentConstructor,
    ReportOverlappingOverload,
    ReportMissingSuperCall,
    ReportUninitializedInstanceVariable,
    ReportCallInDefaultInitializer,
    ReportAssertAlwaysTrue,
    ReportSelfClsParameterName,
    ReportUnhashable,
    ReportUnusedCallResult,
    ReportUnusedExcept,
    ReportUnusedExpression,
    ReportUnreachable,

    /// Custom rule name escape hatch for rules not in the enum
    Custom(String),
}

impl FromStr for RuleName {
    type Err = Infallible;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let result = match s {
            // MyPy error codes
            "attr-defined" => Self::AttrDefined,
            "union-attr" => Self::UnionAttr,
            "name-defined" => Self::NameDefined,
            "used-before-def" => Self::UsedBeforeDef,
            "call-arg" => Self::CallArg,
            "arg-type" => Self::ArgType,
            "call-overload" => Self::CallOverload,
            "valid-type" => Self::ValidType,
            "var-annotated" => Self::VarAnnotated,
            "override" => Self::Override,
            "return" => Self::Return,
            "empty-body" => Self::EmptyBody,
            "return-value" => Self::ReturnValue,
            "assignment" => Self::Assignment,
            "method-assign" => Self::MethodAssign,
            "type-var" => Self::TypeVar,
            "operator" => Self::Operator,
            "index" => Self::Index,
            "list-item" => Self::ListItem,
            "dict-item" => Self::DictItem,
            "typeddict-item" => Self::TypedDictItem,
            "typeddict-unknown-key" => Self::TypedDictUnknownKey,
            "has-type" => Self::HasType,
            "import" => Self::Import,
            "import-not-found" => Self::ImportNotFound,
            "import-untyped" => Self::ImportUntyped,
            "no-redef" => Self::NoRedef,
            "func-returns-value" => Self::FuncReturnsValue,
            "abstract" => Self::Abstract,
            "type-abstract" => Self::TypeAbstract,
            "safe-super" => Self::SafeSuper,
            "valid-newtype" => Self::ValidNewtype,
            "exit-return" => Self::ExitReturn,
            "name-match" => Self::NameMatch,
            "literal-required" => Self::LiteralRequired,
            "no-overload-impl" => Self::NoOverloadImpl,
            "unused-coroutine" => Self::UnusedCoroutine,
            "top-level-await" => Self::TopLevelAwait,
            "await-not-async" => Self::AwaitNotAsync,
            "assert-type" => Self::AssertType,
            "truthy-function" => Self::TruthyFunction,
            "str-format" => Self::StrFormat,
            "str-bytes-safe" => Self::StrBytesSafe,
            "overload-overlap" => Self::OverloadOverlap,
            "overload-cannot-match" => Self::OverloadCannotMatch,
            "annotation-unchecked" => Self::AnnotationUnchecked,
            "prop-decorator" => Self::PropDecorator,
            "syntax" => Self::Syntax,
            "typeddict-readonly-mutated" => Self::TypedDictReadonlyMutated,
            "narrowed-type-not-subtype" => Self::NarrowedTypeNotSubtype,
            "misc" => Self::Misc,

            // MyPy optional codes
            "type-arg" => Self::TypeArg,
            "no-untyped-def" => Self::NoUntypedDef,
            "redundant-cast" => Self::RedundantCast,
            "redundant-self" => Self::RedundantSelf,
            "comparison-overlap" => Self::ComparisonOverlap,
            "no-untyped-call" => Self::NoUntypedCall,
            "no-any-return" => Self::NoAnyReturn,
            "no-any-unimported" => Self::NoAnyUnimported,
            "unreachable" => Self::Unreachable,
            "deprecated" => Self::Deprecated,
            "redundant-expr" => Self::RedundantExpr,
            "possibly-undefined" => Self::PossiblyUndefined,
            "truthy-bool" => Self::TruthyBool,
            "truthy-iterable" => Self::TruthyIterable,
            "ignore-without-code" => Self::IgnoreWithoutCode,
            "unused-awaitable" => Self::UnusedAwaitable,
            "unused-ignore" => Self::UnusedIgnore,
            "explicit-override" => Self::ExplicitOverride,
            "mutable-override" => Self::MutableOverride,
            "unimported-reveal" => Self::UnimportedReveal,
            "explicit-any" => Self::ExplicitAny,
            "exhaustive-match" => Self::ExhaustiveMatch,

            // Pyright diagnostic rules
            "reportGeneralTypeIssues" => Self::ReportGeneralTypeIssues,
            "reportPropertyTypeMismatch" => Self::ReportPropertyTypeMismatch,
            "reportFunctionMemberAccess" => Self::ReportFunctionMemberAccess,
            "reportMissingImports" => Self::ReportMissingImports,
            "reportMissingModuleSource" => Self::ReportMissingModuleSource,
            "reportInvalidTypeForm" => Self::ReportInvalidTypeForm,
            "reportMissingTypeStubs" => Self::ReportMissingTypeStubs,
            "reportImportCycles" => Self::ReportImportCycles,
            "reportUnusedImport" => Self::ReportUnusedImport,
            "reportUnusedClass" => Self::ReportUnusedClass,
            "reportUnusedFunction" => Self::ReportUnusedFunction,
            "reportUnusedVariable" => Self::ReportUnusedVariable,
            "reportDuplicateImport" => Self::ReportDuplicateImport,
            "reportWildcardImportFromLibrary" => Self::ReportWildcardImportFromLibrary,
            "reportAbstractUsage" => Self::ReportAbstractUsage,
            "reportArgumentType" => Self::ReportArgumentType,
            "reportAssertTypeFailure" => Self::ReportAssertTypeFailure,
            "reportAssignmentType" => Self::ReportAssignmentType,
            "reportAttributeAccessIssue" => Self::ReportAttributeAccessIssue,
            "reportCallIssue" => Self::ReportCallIssue,
            "reportInconsistentOverload" => Self::ReportInconsistentOverload,
            "reportIndexIssue" => Self::ReportIndexIssue,
            "reportInvalidTypeArguments" => Self::ReportInvalidTypeArguments,
            "reportInvalidTypeVarUse" => Self::ReportInvalidTypeVarUse,
            "reportMissingParameterType" => Self::ReportMissingParameterType,
            "reportMissingTypeArgument" => Self::ReportMissingTypeArgument,
            "reportOperatorIssue" => Self::ReportOperatorIssue,
            "reportOptionalMemberAccess" => Self::ReportOptionalMemberAccess,
            "reportOptionalSubscript" => Self::ReportOptionalSubscript,
            "reportOptionalIterable" => Self::ReportOptionalIterable,
            "reportOptionalCall" => Self::ReportOptionalCall,
            "reportOptionalOperand" => Self::ReportOptionalOperand,
            "reportOptionalContextManager" => Self::ReportOptionalContextManager,
            "reportPrivateImportUsage" => Self::ReportPrivateImportUsage,
            "reportPrivateUsage" => Self::ReportPrivateUsage,
            "reportRedeclaration" => Self::ReportRedeclaration,
            "reportReturnType" => Self::ReportReturnType,
            "reportTypedDictNotRequiredAccess" => Self::ReportTypedDictNotRequiredAccess,
            "reportUndefinedVariable" => Self::ReportUndefinedVariable,
            "reportUnknownArgumentType" => Self::ReportUnknownArgumentType,
            "reportUnknownLambdaType" => Self::ReportUnknownLambdaType,
            "reportUnknownMemberType" => Self::ReportUnknownMemberType,
            "reportUnknownParameterType" => Self::ReportUnknownParameterType,
            "reportUnknownVariableType" => Self::ReportUnknownVariableType,
            "reportUnnecessaryCast" => Self::ReportUnnecessaryCast,
            "reportUnnecessaryComparison" => Self::ReportUnnecessaryComparison,
            "reportUnnecessaryContains" => Self::ReportUnnecessaryContains,
            "reportUnnecessaryIsInstance" => Self::ReportUnnecessaryIsInstance,
            "reportUnnecessaryTypeIgnoreComment" => Self::ReportUnnecessaryTypeIgnoreComment,
            "reportUnsupportedDunderAll" => Self::ReportUnsupportedDunderAll,
            "reportUntypedBaseClass" => Self::ReportUntypedBaseClass,
            "reportUntypedClassDecorator" => Self::ReportUntypedClassDecorator,
            "reportUntypedFunctionDecorator" => Self::ReportUntypedFunctionDecorator,
            "reportUntypedNamedTuple" => Self::ReportUntypedNamedTuple,
            "reportIncompatibleMethodOverride" => Self::ReportIncompatibleMethodOverride,
            "reportIncompatibleVariableOverride" => Self::ReportIncompatibleVariableOverride,
            "reportInvalidStringEscapeSequence" => Self::ReportInvalidStringEscapeSequence,
            "reportMissingCallArgument" => Self::ReportMissingCallArgument,
            "reportUnboundVariable" => Self::ReportUnboundVariable,
            "reportPossiblyUnboundVariable" => Self::ReportPossiblyUnboundVariable,
            "reportImplicitOverride" => Self::ReportImplicitOverride,
            "reportInvalidStubStatement" => Self::ReportInvalidStubStatement,
            "reportIncompleteStub" => Self::ReportIncompleteStub,
            "reportUnusedCoroutine" => Self::ReportUnusedCoroutine,
            "reportAwaitNotAsync" => Self::ReportAwaitNotAsync,
            "reportMatchNotExhaustive" => Self::ReportMatchNotExhaustive,
            "reportShadowedImports" => Self::ReportShadowedImports,
            "reportImplicitStringConcatenation" => Self::ReportImplicitStringConcatenation,
            "reportDeprecated" => Self::ReportDeprecated,
            "reportNoOverloadImplementation" => Self::ReportNoOverloadImplementation,
            "reportTypeCommentUsage" => Self::ReportTypeCommentUsage,
            "reportConstantRedefinition" => Self::ReportConstantRedefinition,
            "reportInconsistentConstructor" => Self::ReportInconsistentConstructor,
            "reportOverlappingOverload" => Self::ReportOverlappingOverload,
            "reportMissingSuperCall" => Self::ReportMissingSuperCall,
            "reportUninitializedInstanceVariable" => Self::ReportUninitializedInstanceVariable,
            "reportCallInDefaultInitializer" => Self::ReportCallInDefaultInitializer,
            "reportAssertAlwaysTrue" => Self::ReportAssertAlwaysTrue,
            "reportSelfClsParameterName" => Self::ReportSelfClsParameterName,
            "reportUnhashable" => Self::ReportUnhashable,
            "reportUnusedCallResult" => Self::ReportUnusedCallResult,
            "reportUnusedExcept" => Self::ReportUnusedExcept,
            "reportUnusedExpression" => Self::ReportUnusedExpression,
            "reportUnreachable" => Self::ReportUnreachable,

            // Fall back to custom
            other => Self::Custom(other.to_string()),
        };
        Ok(result)
    }
}

impl RuleName {
    /// Check if this is a known rule (not custom)
    pub fn is_known(&self) -> bool {
        !matches!(self, Self::Custom(_))
    }
}

impl fmt::Display for RuleName {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            // MyPy error codes
            Self::AttrDefined => write!(f, "attr-defined"),
            Self::UnionAttr => write!(f, "union-attr"),
            Self::NameDefined => write!(f, "name-defined"),
            Self::UsedBeforeDef => write!(f, "used-before-def"),
            Self::CallArg => write!(f, "call-arg"),
            Self::ArgType => write!(f, "arg-type"),
            Self::CallOverload => write!(f, "call-overload"),
            Self::ValidType => write!(f, "valid-type"),
            Self::VarAnnotated => write!(f, "var-annotated"),
            Self::Override => write!(f, "override"),
            Self::Return => write!(f, "return"),
            Self::EmptyBody => write!(f, "empty-body"),
            Self::ReturnValue => write!(f, "return-value"),
            Self::Assignment => write!(f, "assignment"),
            Self::MethodAssign => write!(f, "method-assign"),
            Self::TypeVar => write!(f, "type-var"),
            Self::Operator => write!(f, "operator"),
            Self::Index => write!(f, "index"),
            Self::ListItem => write!(f, "list-item"),
            Self::DictItem => write!(f, "dict-item"),
            Self::TypedDictItem => write!(f, "typeddict-item"),
            Self::TypedDictUnknownKey => write!(f, "typeddict-unknown-key"),
            Self::HasType => write!(f, "has-type"),
            Self::Import => write!(f, "import"),
            Self::ImportNotFound => write!(f, "import-not-found"),
            Self::ImportUntyped => write!(f, "import-untyped"),
            Self::NoRedef => write!(f, "no-redef"),
            Self::FuncReturnsValue => write!(f, "func-returns-value"),
            Self::Abstract => write!(f, "abstract"),
            Self::TypeAbstract => write!(f, "type-abstract"),
            Self::SafeSuper => write!(f, "safe-super"),
            Self::ValidNewtype => write!(f, "valid-newtype"),
            Self::ExitReturn => write!(f, "exit-return"),
            Self::NameMatch => write!(f, "name-match"),
            Self::LiteralRequired => write!(f, "literal-required"),
            Self::NoOverloadImpl => write!(f, "no-overload-impl"),
            Self::UnusedCoroutine => write!(f, "unused-coroutine"),
            Self::TopLevelAwait => write!(f, "top-level-await"),
            Self::AwaitNotAsync => write!(f, "await-not-async"),
            Self::AssertType => write!(f, "assert-type"),
            Self::TruthyFunction => write!(f, "truthy-function"),
            Self::StrFormat => write!(f, "str-format"),
            Self::StrBytesSafe => write!(f, "str-bytes-safe"),
            Self::OverloadOverlap => write!(f, "overload-overlap"),
            Self::OverloadCannotMatch => write!(f, "overload-cannot-match"),
            Self::AnnotationUnchecked => write!(f, "annotation-unchecked"),
            Self::PropDecorator => write!(f, "prop-decorator"),
            Self::Syntax => write!(f, "syntax"),
            Self::TypedDictReadonlyMutated => write!(f, "typeddict-readonly-mutated"),
            Self::NarrowedTypeNotSubtype => write!(f, "narrowed-type-not-subtype"),
            Self::Misc => write!(f, "misc"),

            // MyPy optional codes
            Self::TypeArg => write!(f, "type-arg"),
            Self::NoUntypedDef => write!(f, "no-untyped-def"),
            Self::RedundantCast => write!(f, "redundant-cast"),
            Self::RedundantSelf => write!(f, "redundant-self"),
            Self::ComparisonOverlap => write!(f, "comparison-overlap"),
            Self::NoUntypedCall => write!(f, "no-untyped-call"),
            Self::NoAnyReturn => write!(f, "no-any-return"),
            Self::NoAnyUnimported => write!(f, "no-any-unimported"),
            Self::Unreachable => write!(f, "unreachable"),
            Self::Deprecated => write!(f, "deprecated"),
            Self::RedundantExpr => write!(f, "redundant-expr"),
            Self::PossiblyUndefined => write!(f, "possibly-undefined"),
            Self::TruthyBool => write!(f, "truthy-bool"),
            Self::TruthyIterable => write!(f, "truthy-iterable"),
            Self::IgnoreWithoutCode => write!(f, "ignore-without-code"),
            Self::UnusedAwaitable => write!(f, "unused-awaitable"),
            Self::UnusedIgnore => write!(f, "unused-ignore"),
            Self::ExplicitOverride => write!(f, "explicit-override"),
            Self::MutableOverride => write!(f, "mutable-override"),
            Self::UnimportedReveal => write!(f, "unimported-reveal"),
            Self::ExplicitAny => write!(f, "explicit-any"),
            Self::ExhaustiveMatch => write!(f, "exhaustive-match"),

            // Pyright rules - use the original names
            Self::ReportGeneralTypeIssues => write!(f, "reportGeneralTypeIssues"),
            Self::ReportPropertyTypeMismatch => write!(f, "reportPropertyTypeMismatch"),
            Self::ReportFunctionMemberAccess => write!(f, "reportFunctionMemberAccess"),
            Self::ReportMissingImports => write!(f, "reportMissingImports"),
            Self::ReportMissingModuleSource => write!(f, "reportMissingModuleSource"),
            Self::ReportInvalidTypeForm => write!(f, "reportInvalidTypeForm"),
            Self::ReportMissingTypeStubs => write!(f, "reportMissingTypeStubs"),
            Self::ReportImportCycles => write!(f, "reportImportCycles"),
            Self::ReportUnusedImport => write!(f, "reportUnusedImport"),
            Self::ReportUnusedClass => write!(f, "reportUnusedClass"),
            Self::ReportUnusedFunction => write!(f, "reportUnusedFunction"),
            Self::ReportUnusedVariable => write!(f, "reportUnusedVariable"),
            Self::ReportDuplicateImport => write!(f, "reportDuplicateImport"),
            Self::ReportWildcardImportFromLibrary => write!(f, "reportWildcardImportFromLibrary"),
            Self::ReportAbstractUsage => write!(f, "reportAbstractUsage"),
            Self::ReportArgumentType => write!(f, "reportArgumentType"),
            Self::ReportAssertTypeFailure => write!(f, "reportAssertTypeFailure"),
            Self::ReportAssignmentType => write!(f, "reportAssignmentType"),
            Self::ReportAttributeAccessIssue => write!(f, "reportAttributeAccessIssue"),
            Self::ReportCallIssue => write!(f, "reportCallIssue"),
            Self::ReportInconsistentOverload => write!(f, "reportInconsistentOverload"),
            Self::ReportIndexIssue => write!(f, "reportIndexIssue"),
            Self::ReportInvalidTypeArguments => write!(f, "reportInvalidTypeArguments"),
            Self::ReportInvalidTypeVarUse => write!(f, "reportInvalidTypeVarUse"),
            Self::ReportMissingParameterType => write!(f, "reportMissingParameterType"),
            Self::ReportMissingTypeArgument => write!(f, "reportMissingTypeArgument"),
            Self::ReportOperatorIssue => write!(f, "reportOperatorIssue"),
            Self::ReportOptionalMemberAccess => write!(f, "reportOptionalMemberAccess"),
            Self::ReportOptionalSubscript => write!(f, "reportOptionalSubscript"),
            Self::ReportOptionalIterable => write!(f, "reportOptionalIterable"),
            Self::ReportOptionalCall => write!(f, "reportOptionalCall"),
            Self::ReportOptionalOperand => write!(f, "reportOptionalOperand"),
            Self::ReportOptionalContextManager => write!(f, "reportOptionalContextManager"),
            Self::ReportPrivateImportUsage => write!(f, "reportPrivateImportUsage"),
            Self::ReportPrivateUsage => write!(f, "reportPrivateUsage"),
            Self::ReportRedeclaration => write!(f, "reportRedeclaration"),
            Self::ReportReturnType => write!(f, "reportReturnType"),
            Self::ReportTypedDictNotRequiredAccess => write!(f, "reportTypedDictNotRequiredAccess"),
            Self::ReportUndefinedVariable => write!(f, "reportUndefinedVariable"),
            Self::ReportUnknownArgumentType => write!(f, "reportUnknownArgumentType"),
            Self::ReportUnknownLambdaType => write!(f, "reportUnknownLambdaType"),
            Self::ReportUnknownMemberType => write!(f, "reportUnknownMemberType"),
            Self::ReportUnknownParameterType => write!(f, "reportUnknownParameterType"),
            Self::ReportUnknownVariableType => write!(f, "reportUnknownVariableType"),
            Self::ReportUnnecessaryCast => write!(f, "reportUnnecessaryCast"),
            Self::ReportUnnecessaryComparison => write!(f, "reportUnnecessaryComparison"),
            Self::ReportUnnecessaryContains => write!(f, "reportUnnecessaryContains"),
            Self::ReportUnnecessaryIsInstance => write!(f, "reportUnnecessaryIsInstance"),
            Self::ReportUnnecessaryTypeIgnoreComment => {
                write!(f, "reportUnnecessaryTypeIgnoreComment")
            }
            Self::ReportUnsupportedDunderAll => write!(f, "reportUnsupportedDunderAll"),
            Self::ReportUntypedBaseClass => write!(f, "reportUntypedBaseClass"),
            Self::ReportUntypedClassDecorator => write!(f, "reportUntypedClassDecorator"),
            Self::ReportUntypedFunctionDecorator => write!(f, "reportUntypedFunctionDecorator"),
            Self::ReportUntypedNamedTuple => write!(f, "reportUntypedNamedTuple"),
            Self::ReportIncompatibleMethodOverride => write!(f, "reportIncompatibleMethodOverride"),
            Self::ReportIncompatibleVariableOverride => {
                write!(f, "reportIncompatibleVariableOverride")
            }
            Self::ReportInvalidStringEscapeSequence => {
                write!(f, "reportInvalidStringEscapeSequence")
            }
            Self::ReportMissingCallArgument => write!(f, "reportMissingCallArgument"),
            Self::ReportUnboundVariable => write!(f, "reportUnboundVariable"),
            Self::ReportPossiblyUnboundVariable => write!(f, "reportPossiblyUnboundVariable"),
            Self::ReportImplicitOverride => write!(f, "reportImplicitOverride"),
            Self::ReportInvalidStubStatement => write!(f, "reportInvalidStubStatement"),
            Self::ReportIncompleteStub => write!(f, "reportIncompleteStub"),
            Self::ReportUnusedCoroutine => write!(f, "reportUnusedCoroutine"),
            Self::ReportAwaitNotAsync => write!(f, "reportAwaitNotAsync"),
            Self::ReportMatchNotExhaustive => write!(f, "reportMatchNotExhaustive"),
            Self::ReportShadowedImports => write!(f, "reportShadowedImports"),
            Self::ReportImplicitStringConcatenation => {
                write!(f, "reportImplicitStringConcatenation")
            }
            Self::ReportDeprecated => write!(f, "reportDeprecated"),
            Self::ReportNoOverloadImplementation => write!(f, "reportNoOverloadImplementation"),
            Self::ReportTypeCommentUsage => write!(f, "reportTypeCommentUsage"),
            Self::ReportConstantRedefinition => write!(f, "reportConstantRedefinition"),
            Self::ReportInconsistentConstructor => write!(f, "reportInconsistentConstructor"),
            Self::ReportOverlappingOverload => write!(f, "reportOverlappingOverload"),
            Self::ReportMissingSuperCall => write!(f, "reportMissingSuperCall"),
            Self::ReportUninitializedInstanceVariable => {
                write!(f, "reportUninitializedInstanceVariable")
            }
            Self::ReportCallInDefaultInitializer => write!(f, "reportCallInDefaultInitializer"),
            Self::ReportAssertAlwaysTrue => write!(f, "reportAssertAlwaysTrue"),
            Self::ReportSelfClsParameterName => write!(f, "reportSelfClsParameterName"),
            Self::ReportUnhashable => write!(f, "reportUnhashable"),
            Self::ReportUnusedCallResult => write!(f, "reportUnusedCallResult"),
            Self::ReportUnusedExcept => write!(f, "reportUnusedExcept"),
            Self::ReportUnusedExpression => write!(f, "reportUnusedExpression"),
            Self::ReportUnreachable => write!(f, "reportUnreachable"),

            Self::Custom(s) => write!(f, "{}", s),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_mypy_error_codes() {
        assert_eq!(
            "attr-defined".parse::<RuleName>().unwrap(),
            RuleName::AttrDefined
        );
        assert_eq!(RuleName::AttrDefined.to_string(), "attr-defined");

        assert_eq!(
            "union-attr".parse::<RuleName>().unwrap(),
            RuleName::UnionAttr
        );
        assert_eq!(RuleName::UnionAttr.to_string(), "union-attr");
    }

    #[test]
    fn test_pyright_rules() {
        assert_eq!(
            "reportGeneralTypeIssues".parse::<RuleName>().unwrap(),
            RuleName::ReportGeneralTypeIssues
        );
        assert_eq!(
            RuleName::ReportGeneralTypeIssues.to_string(),
            "reportGeneralTypeIssues"
        );
    }

    #[test]
    fn test_custom_rule() {
        assert_eq!(
            "unknown-rule".parse::<RuleName>().unwrap(),
            RuleName::Custom("unknown-rule".to_string())
        );
        assert_eq!(RuleName::Custom("custom".to_string()).to_string(), "custom");
        assert!("attr-defined".parse::<RuleName>().unwrap().is_known());
        assert!(!"unknown-rule".parse::<RuleName>().unwrap().is_known());
    }
}
